#!/usr/bin/env node

/***
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0
***/

'use strict';

var fs = require('fs');
var http = require('http');
var https = require('https');
var path = require('path');
var program = require('commander');
var spawn = require('child_process').spawn;
var url = require('url');
var util = require('util');


var MAVEN_PACKAGE_LIST = [
  getMavenPackageInfo('software.amazon.kinesis', 'amazon-kinesis-client-multilang', '2.3.9'),
  getMavenPackageInfo('software.amazon.kinesis', 'amazon-kinesis-client', '2.3.9'),
  getMavenPackageInfo('software.amazon.awssdk', 'kinesis', '2.17.52'),
  getMavenPackageInfo('software.amazon.awssdk', 'aws-cbor-protocol', '2.17.52'),
  getMavenPackageInfo('com.fasterxml.jackson.dataformat', 'jackson-dataformat-cbor', '2.12.3'),
  getMavenPackageInfo('software.amazon.awssdk', 'aws-json-protocol', '2.17.52'),
  getMavenPackageInfo('software.amazon.awssdk', 'dynamodb', '2.17.52'),
  getMavenPackageInfo('software.amazon.awssdk', 'cloudwatch', '2.17.52'),
  getMavenPackageInfo('software.amazon.awssdk', 'netty-nio-client', '2.17.52'),
  getMavenPackageInfo('io.netty', 'netty-codec-http', '4.1.68.Final'),
  getMavenPackageInfo('io.netty', 'netty-codec-http2', '4.1.68.Final'),
  getMavenPackageInfo('io.netty', 'netty-codec', '4.1.68.Final'),
  getMavenPackageInfo('io.netty', 'netty-transport', '4.1.68.Final'),
  getMavenPackageInfo('io.netty', 'netty-resolver', '4.1.68.Final'),
  getMavenPackageInfo('io.netty', 'netty-common', '4.1.68.Final'),
  getMavenPackageInfo('io.netty', 'netty-buffer', '4.1.68.Final'),
  getMavenPackageInfo('io.netty', 'netty-handler', '4.1.68.Final'),
  getMavenPackageInfo('io.netty', 'netty-transport-native-epoll', '4.1.68.Final'),
  getMavenPackageInfo('io.netty', 'netty-transport-native-unix-common', '4.1.68.Final'),
  getMavenPackageInfo('com.typesafe.netty', 'netty-reactive-streams-http', '2.0.5'),
  getMavenPackageInfo('com.typesafe.netty', 'netty-reactive-streams', '2.0.5'),
  getMavenPackageInfo('org.reactivestreams', 'reactive-streams', '1.0.3'),
  getMavenPackageInfo('com.google.guava', 'guava', '30.0-jre'),
  getMavenPackageInfo('com.google.code.findbugs', 'jsr305', '3.0.2'),
  getMavenPackageInfo('org.checkerframework', 'checker-qual', '3.5.0'),
  getMavenPackageInfo('com.google.errorprone', 'error_prone_annotations', '2.3.4'),
  getMavenPackageInfo('com.google.j2objc', 'j2objc-annotations', '1.3'),
  getMavenPackageInfo('org.codehaus.mojo', 'animal-sniffer-annotations', '1.14'), // REMOVE ME
  getMavenPackageInfo('com.google.protobuf', 'protobuf-java', '3.11.4'),
  getMavenPackageInfo('org.apache.commons', 'commons-lang3', '3.8.1'),
  getMavenPackageInfo('org.slf4j', 'slf4j-api', '1.7.32'),
  getMavenPackageInfo('io.reactivex.rxjava2', 'rxjava', '2.1.14'),
  getMavenPackageInfo('software.amazon.awssdk', 'sts', '2.17.52'),
  getMavenPackageInfo('software.amazon.awssdk', 'aws-query-protocol', '2.17.52'),
  getMavenPackageInfo('software.amazon.awssdk', 'protocol-core', '2.17.52'),
  getMavenPackageInfo('software.amazon.awssdk', 'profiles', '2.17.52'),
  getMavenPackageInfo('software.amazon.awssdk', 'sdk-core', '2.17.52'),
  getMavenPackageInfo('com.fasterxml.jackson.core', 'jackson-core', '2.12.3'),
  getMavenPackageInfo('com.fasterxml.jackson.core', 'jackson-databind', '2.12.3'),
  getMavenPackageInfo('software.amazon.awssdk', 'auth', '2.17.97'),
  getMavenPackageInfo('software.amazon', 'flow', '1.7'), // REMOVE ME
  getMavenPackageInfo('software.amazon.awssdk', 'http-client-spi', '2.17.52'),
  getMavenPackageInfo('software.amazon.awssdk', 'regions', '2.17.52'),
  getMavenPackageInfo('com.fasterxml.jackson.core', 'jackson-annotations', '2.12.3'),
  getMavenPackageInfo('software.amazon.awssdk', 'annotations', '2.17.52'),
  getMavenPackageInfo('software.amazon.awssdk', 'utils', '2.17.52'),
  getMavenPackageInfo('software.amazon.awssdk', 'aws-core', '2.17.52'),
  getMavenPackageInfo('software.amazon.awssdk', 'apache-client', '2.17.52'),
  getMavenPackageInfo('org.apache.httpcomponents', 'httpclient', '4.5.13'),
  getMavenPackageInfo('commons-codec', 'commons-codec', '1.15'),
  getMavenPackageInfo('org.apache.httpcomponents', 'httpcore', '4.4.13'),
  getMavenPackageInfo('com.amazonaws', 'aws-java-sdk-core', '1.12.3'),
  getMavenPackageInfo('commons-logging', 'commons-logging', '1.2'),
  getMavenPackageInfo('software.amazon.ion', 'ion-java', '1.0.2'),
  getMavenPackageInfo('joda-time', 'joda-time', '2.10.2'),
  getMavenPackageInfo('ch.qos.logback', 'logback-classic', '1.2.7'),
  getMavenPackageInfo('ch.qos.logback', 'logback-core', '1.2.7'),
  getMavenPackageInfo('com.beust', 'jcommander', '1.72'),
  getMavenPackageInfo('commons-io', 'commons-io', '2.7'),
  getMavenPackageInfo('org.apache.commons', 'commons-collections4', '4.2'),
  getMavenPackageInfo('commons-beanutils', 'commons-beanutils', '1.9.4'),
  getMavenPackageInfo('commons-collections', 'commons-collections', '3.2.2'),
  // add
  getMavenPackageInfo('software.amazon.awssdk', 'arns', '2.17.52'),
  getMavenPackageInfo('com.amazonaws', 'aws-java-sdk-sts', '1.12.3'),
  getMavenPackageInfo('com.amazonaws', 'jmespath-java', '1.12.3'),
  getMavenPackageInfo('com.damnhandy', 'handy-uri-templates', '2.1.8'),
  // getMavenPackageInfo('com.fasterxml.jackson', 'jackson-bom', '2.12.3'), // ???
  getMavenPackageInfo('com.github.erosb', 'everit-json-schema', '1.12.2'),
  getMavenPackageInfo('com.github.luben', 'zstd-jni', '1.4.9-1'),
  getMavenPackageInfo('com.google.guava', 'failureaccess', '1.0.1'),
  getMavenPackageInfo('com.google.guava', 'listenablefuture', '9999.0-empty-to-avoid-conflict-with-guava'),
  getMavenPackageInfo('com.google.re2j', 're2j', '1.3'),
  getMavenPackageInfo('com.kjetland', 'mbknor-jackson-jsonschema_2.12', '1.0.39'),
  getMavenPackageInfo('commons-digester', 'commons-digester', '1.8.1'),
  getMavenPackageInfo('commons-validator', 'commons-validator', '1.6'),
  getMavenPackageInfo('io.github.classgraph', 'classgraph', '4.8.120'),
  getMavenPackageInfo('javax.validation', 'validation-api', '2.0.1.Final'),
  getMavenPackageInfo('org.apache.avro', 'avro', '1.10.2'),
  getMavenPackageInfo('org.apache.commons', 'commons-compress', '1.21'),
  getMavenPackageInfo('org.apache.kafka', 'kafka-clients', '2.8.1'),
  getMavenPackageInfo('org.jetbrains', 'annotations', '13.0'),
  getMavenPackageInfo('org.jetbrains.kotlin', 'kotlin-reflect', '1.3.50'),
  getMavenPackageInfo('org.jetbrains.kotlin', 'kotlin-script-runtime', '1.3.50'),
  getMavenPackageInfo('org.jetbrains.kotlin', 'kotlin-scripting-common', '1.3.50'),
  getMavenPackageInfo('org.jetbrains.kotlin', 'kotlin-scripting-compiler-embeddable', '1.3.50'),
  getMavenPackageInfo('org.jetbrains.kotlin', 'kotlin-scripting-compiler-impl-embeddable', '1.3.50'),
  getMavenPackageInfo('org.jetbrains.kotlin', 'kotlin-scripting-jvm', '1.3.50'),
  getMavenPackageInfo('org.jetbrains.kotlin', 'kotlin-stdlib-common', '1.3.50'),
  getMavenPackageInfo('org.jetbrains.kotlin', 'kotlin-stdlib', '1.3.50'),
  getMavenPackageInfo('org.jetbrains.kotlinx', 'kotlinx-coroutines-core', '1.1.1'),
  getMavenPackageInfo('org.json', 'json', '20201115'),
  getMavenPackageInfo('org.lz4', 'lz4-java', '1.7.1'),
  getMavenPackageInfo('org.projectlombok', 'lombok-utils', '1.18.12'),
  getMavenPackageInfo('org.projectlombok', 'lombok', '1.18.20'),
  getMavenPackageInfo('org.scala-lang', 'scala-library', '2.12.10'),
  getMavenPackageInfo('org.xerial.snappy', 'snappy-java', '1.1.8.1'),
  getMavenPackageInfo('software.amazon.awssdk', 'glue', '2.17.52'),
  getMavenPackageInfo('software.amazon.awssdk', 'json-utils', '2.17.52'),
  getMavenPackageInfo('software.amazon.awssdk', 'metrics-spi', '2.17.52'),
  getMavenPackageInfo('software.amazon.awssdk', 'third-party-jackson-core', '2.17.52'),
  getMavenPackageInfo('software.amazon.awssdk', 'third-party-jackson-dataformat-cbor', '2.17.52'),
  getMavenPackageInfo('software.amazon.awssdk', 'url-connection-client', '2.17.52'),
  getMavenPackageInfo('software.amazon.eventstream', 'eventstream', '1.0.1'),
  getMavenPackageInfo('software.amazon.eventstream', 'eventstream', '1.0.1'),
  getMavenPackageInfo('software.amazon.glue', 'schema-registry-build-tools', '1.1.5'),
  getMavenPackageInfo('software.amazon.glue', 'schema-registry-common', '1.1.5'),
  getMavenPackageInfo('software.amazon.glue', 'schema-registry-serde', '1.1.5'),
]

var DEFAULT_JAR_PATH = path.resolve(path.join(__dirname, '..', 'lib', 'jars'));
var MULTI_LANG_DAEMON_CLASS = 'software.amazon.kinesis.multilang.MultiLangDaemon';
var MAX_HTTP_REDIRECT_FOLLOW = 3;


function bootstrap() {
  var args = parseArguments();
  downloadMavenPackages(MAVEN_PACKAGE_LIST, args.jarPath, function (err) {
    if (err) {
      errorExit(util.format('Unable to download MultiLangDaemon jar files from maven: %s', err));
    }
    startKinesisClientLibraryApplication(args);
  });
}

function createJavaHomeExecutablePath() {
  return path.join(process.env.JAVA_HOME, 'bin', process.platform !== 'win32' ? 'java' : 'java.exe');
}

function parseArguments() {
  program
    .option('-p, --properties [properties file]', 'properties file with multi-language daemon options')
    .option('-l, --log-configuration [logback.xml]', 'logback.xml to be used with MultiLangDaemon for logging (optional)')
    .option('-j, --java [java path]', 'path to java executable - defaults to using JAVA_HOME environment variable to get java path (optional)')
    .option('-c, --jar-path [jar path]', 'path where all multi-language daemon jar files will be downloaded (optional)')
    .option('-e, --execute', 'execute the KCL application')
    .parse(process.argv);

  var args = {
    'properties': program.properties,
    'logConfiguration': program.logConfiguration ? program.logConfiguration : null,
    'java': (program.java ? program.java : (process.env.JAVA_HOME ? createJavaHomeExecutablePath() : null)),
    'jarPath': (program.jarPath ? program.jarPath : DEFAULT_JAR_PATH),
    'execute': program.execute
  };

  if (!args.properties) {
    invalidInvocationExit(program, 'Specify a valid --properties value.', true);
  }
  if (!isFile(args.properties)) {
    invalidInvocationExit(program, args.properties + ' file does not exist. Specify a valid --properties value.', true);
  }
  if (!isFile(args.java)) {
    invalidInvocationExit(program, 'Valid --java value is required or alternatively JAVA_HOME environment variable must be set.', true);
  }
  if (args.logCofiguration && !isFile(args.logConfiguration)) {
    invalidInvocationExit(program, args.logConfiguration + ' file does not exists. Specify a valid --log-configuration value', true);
  }
  if (args.jarPath === DEFAULT_JAR_PATH) {
    createDirectory(args.jarPath);
  }
  else if (!isDirectory(args.jarPath)) {
    invalidInvocationExit(program, 'Path specified with --jar-path must already exist and must be a directory.', false);
  }
  return args;
}

function startKinesisClientLibraryApplication(options) {
  var classpath = getClasspath(options).join(getPathDelimiter());
  var java = options.java;
  var logConfiguration = options.logConfiguration ? ['--log-configuration', options.logConfiguration] : [];
  var args = ['-cp', classpath, MULTI_LANG_DAEMON_CLASS, '--properties-file', options.properties, ...logConfiguration];
  var cmd = java + ' ' + args.join(' ');

  console.log("==========================================================");
  // console.log(cmd);
  console.log("==========================================================");
  if (options.execute) {
    console.log("Starting MultiLangDaemon ...");
    spawn(java, args, { stdio: 'inherit' });
  }
}

function getClasspath(options) {
  var classpath = [];
  fs.readdirSync(options.jarPath).map(function (file) {
    return path.join(options.jarPath, file);
  }).filter(function (file) {
    return isFile(file);
  }).forEach(function (file) {
    classpath.push(path.resolve(file));
  });
  classpath.push(path.resolve('.'));
  classpath.push(path.dirname(path.resolve(options.properties)));
  return classpath;
}

function downloadMavenPackages(mavenPackages, destinationDirectory, callback) {
  var remainingPackages = mavenPackages.length;
  var callbackInvoked = false;

  var downloadMavenPackageCallback = function (err, filePath) {
    remainingPackages = remainingPackages - 1;
    if (!callbackInvoked) {
      if (!err) {
        console.log(remainingPackages + ' files remain. ' + filePath + ' downloaded. ');
      }
      if (err || remainingPackages === 0) {
        callbackInvoked = true;
        callback(err);
        return;
      }
    }
  };

  for (var i = 0; i < mavenPackages.length; ++i) {
    downloadMavenPackage(mavenPackages[i], destinationDirectory, downloadMavenPackageCallback);
  }
}

function downloadMavenPackage(mavenPackage, destinationDirectory, callback) {
  process.nextTick(function () {
    var mavenPackageUrlInfo = getMavenPackageUrlInfo(mavenPackage);
    var destinationFile = path.join(destinationDirectory, mavenPackageUrlInfo.fileName);
    if (fs.existsSync(destinationFile)) {
      callback(null, destinationFile);
      return;
    }
    httpDownloadFile(mavenPackageUrlInfo.url, destinationFile, 0, callback);
  });
}

function httpDownloadFile(requestUrl, destinationFile, redirectCount, callback) {
  if (redirectCount >= MAX_HTTP_REDIRECT_FOLLOW) {
    callback('Reached maximum redirects. ' + requestUrl + ' could not be downloaded.');
    return;
  }
  var protocol = (url.parse(requestUrl).protocol === 'https:' ? https : http);
  var options = {
    hostname: url.parse(requestUrl).hostname,
    path: url.parse(requestUrl).path,
    agent: false
  };
  var request = protocol.get(options, function (response) {
    // Non-2XX response.
    if (response.statusCode > 300) {
      if (response.statusCode > 300 && response.statusCode < 400 && response.headers.location) {
        httpDownloadFile(response.headers.location, destinationFile, redirectCount + 1, callback);
        return;
      }
      else {
        callback(requestUrl + ' could not be downloaded: ' + response.statusCode);
        return;
      }
    }
    else {
      var destinationFileStream = fs.createWriteStream(destinationFile);
      response.pipe(destinationFileStream);

      var callbackInvoked = false;
      var destinationFileStreamFinishCallback = function () {
        if (callbackInvoked) {
          return;
        }
        callbackInvoked = true;
        callback(null, destinationFile);
      };
      destinationFileStream.on('finish', destinationFileStreamFinishCallback);
      // Older Node.js version may not support 'finish' event.
      destinationFileStream.on('close', destinationFileStreamFinishCallback);
    }
  }).on('error', function (err) {
    fs.unlink(destinationFile);
    callback(err);
  });
}

function getMavenPackageUrlInfo(mavenPackage) {
  var urlParts = [];
  var fileName = util.format('%s-%s.jar', mavenPackage.artifactId, mavenPackage.version);
  mavenPackage.groupId.split('.').forEach(function (part) {
    urlParts.push(part);
  });
  urlParts.push(mavenPackage.artifactId);
  urlParts.push(mavenPackage.version);
  urlParts.push(fileName);
  return {
    'url': "https://repo1.maven.org/maven2/" + urlParts.join('/'),
    'fileName': fileName
  };
}

function getMavenPackageInfo(groupId, artifactId, version) {
  return {
    'groupId': groupId,
    'artifactId': artifactId,
    'version': version
  };
}

function isDirectory(path) {
  try {
    return fs.statSync(path).isDirectory();
  } catch (e) {
    // Path does not exist.
    return false;
  }
}

function createDirectory(path) {
  try {
    fs.mkdirSync(path);
  } catch (e) {
    if (e.code !== 'EEXIST') {
      throw e;
    }
  }
}

function isFile(path) {
  try {
    return fs.statSync(path).isFile();
  } catch (e) {
    // Path does not exist.
    return false;
  }
}

function getPathDelimiter() {
  if (path.delimiter) {
    return path.delimiter;
  }
  // Older Node.js version may not support path.delimiter.
  return (/^win/.test(process.platform) ? ';' : ':');
}

function invalidInvocationExit(prog, err, showHelp) {
  console.error('');
  console.error(util.format('ERROR: %s', err));
  console.error('');
  if (showHelp) {
    prog.outputHelp();
  }
  process.exit(1);
}

function errorExit(err) {
  console.error('');
  console.error(util.format('ERROR: %s', err));
  console.error('');
  process.exit(1);
}

bootstrap();
